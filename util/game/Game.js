"use strict";sap.ui.define(["../StorageManager","./AIPlayer","./Deck","./HumanPlayer","./Trick","../SoundManager"],function(e,r,t,s,i,n){"use strict";function a(e){return e&&e.__esModule&&typeof e.default!=="undefined"?e.default:e}const h=e["StorageManager"];const l=a(r);const o=a(t);const c=a(s);const u=a(i);const d=n["SoundManager"];class y{constructor(e){this.controller=e;this.players=[];this.deck=new o;this.deck.shuffle();this.cardsPlayed=[];this.discardPile=[];this.waitTime=4e3}setup(e){this.levelConfig=e;const r=new c(1);this.humanPlayer=r;this.players.push(r);this.players.push(new l(2,"Player 2"));this.players.push(new l(3,"Player 3"));this.players.push(new l(4,"Player 4"));h.setCoins(h.getCoins()-e.minimumBet);this.coins=e.minimumBet*this.players.length;for(let e=0;e<4;e++){this.players.forEach(e=>{e.dealCard(this.deck.takeCard())})}this.startGame()}refreshViewModel(){this.controller.modelRefresh()}getRemainingPlayers(){return this.players.filter(e=>!e.hasFolded())}startGame(){this.currentTrick=new u(1);this.setCurrentPlayer(this.getRandomPlayer())}setCurrentPlayer(e){this.currentPlayer=e;if(e.hasFolded()){this.endTurn();return}this.currentPlayer.pickCardToPlay(this.currentTrick).then(e=>{this.playCard(e)}).catch(e=>{console.error("Error picking card to play:",e)})}playCard(e){console.log(`${this.currentPlayer.name} played ${e.getValue()}-${e.getSuit()}`);d.playCardSound();this.currentTrick.addCard(e);this.endTurn()}endTurn(){if(this.currentTrick.cardsPlayed.length===this.getRemainingPlayers().length){this.currentTrick.markWinner();this.refreshViewModel();setTimeout(()=>{this.endTrick();this.refreshViewModel()},this.waitTime)}else{this.setCurrentPlayer(this.getNextPlayer());this.refreshViewModel()}}endTrick(){if(this.currentTrick.no===4){this.endGame();return}const e=this.currentTrick.getWinner();this.players.forEach(e=>{e.setWinner(false)});console.log(`${e.name} won trick ${this.currentTrick.no}`);this.currentTrick=new u(this.currentTrick.no+1);this.setCurrentPlayer(e)}endGame(){const e=this.currentTrick.getWinner();if(e instanceof c){h.setCoins(h.getCoins()+this.coins)}this.winner=e;this.controller.openWinnerDialog();console.log(`${e.name} won the game`)}getRandomPlayer(){return this.players[Math.floor(Math.random()*this.players.length)]}getNextPlayer(){const e=this.players.indexOf(this.currentPlayer);return this.players[(e+1)%this.players.length]}}return y});
//# sourceMappingURL=Game.js.map